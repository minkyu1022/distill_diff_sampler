import torch
import torchani
from ase.io import read
from ase.data import chemical_symbols
from torchani.units import hartree2kjoulemol

from .base_set import BaseSet

initial_position = [
    [0.1341, 0.0000, 0.0000],
    [0.2133, -0.0001, -0.1234],
    [0.2035, -0.1325, -0.1984],
    [0.2687, -0.1517, -0.3011],
    [0.3563, 0.0229, -0.0738],
    [0.3564, -0.0277, 0.0663],
    [0.2188, 0.0000, 0.1204],
    [0.1844, 0.0806, -0.1891],
    [0.4255, -0.0324, -0.1359],
    [0.3797, 0.1282, -0.0777],
    [0.3762, -0.1338, 0.0671],
    [0.4307, 0.0250, 0.1243],
    [0.1887, -0.0780, 0.1888],
    [0.2162, 0.0963, 0.1693],
    [0.1218, -0.2235, -0.1465],
    [0.1037, -0.3542, -0.2086],
    [-0.0349, -0.4101, -0.1782],
    [-0.0534, -0.4912, -0.0874],
    [0.2111, -0.4515, -0.1596],
    [0.2203, -0.5779, -0.2420],
    [0.2342, -0.5723, -0.3801],
    [0.2149, -0.7030, -0.1817],
    [0.2426, -0.6876, -0.4558],
    [0.2233, -0.8188, -0.2566],
    [0.2371, -0.8106, -0.3936],
    [0.2454, -0.9257, -0.4686],
    [0.0726, -0.2023, -0.0645],
    [0.1137, -0.3418, -0.3154],
    [0.3072, -0.4027, -0.1631],
    [0.1893, -0.4798, -0.0577],
    [0.2385, -0.4758, -0.4286],
    [0.2040, -0.7091, -0.0744],
    [0.2534, -0.6812, -0.5631],
    [0.2190, -0.9151, -0.2079],
    [0.3249, -0.9231, -0.5224],
    [-0.1348, -0.3660, -0.2560],
    [-0.1140, -0.2694, -0.3644],
    [-0.0799, -0.1303, -0.3122],
    [-0.0100, -0.0535, -0.3784],
    [-0.2488, -0.2679, -0.4369],
    [-0.3478, -0.3097, -0.3337],
    [-0.2758, -0.4068, -0.2442],
    [-0.0367, -0.3022, -0.4324],
    [-0.2692, -0.1682, -0.4733],
    [-0.2463, -0.3372, -0.5196],
    [-0.3805, -0.2238, -0.2772],
    [-0.4320, -0.3579, -0.3812],
    [-0.3104, -0.3970, -0.1424],
    [-0.2896, -0.5080, -0.2794],
    [-0.1298, -0.0983, -0.1933],
    [-0.1045, 0.0317, -0.1322],
    [-0.0160, 0.0181, -0.0088],
    [-0.0654, 0.0093, 0.1036],
    [-0.2359, 0.1015, -0.0923],
    [-0.2081, 0.2412, -0.0390],
    [-0.3314, 0.1067, -0.2106],
    [-0.1849, -0.1637, -0.1454],
    [-0.0540, 0.0935, -0.2049],
    [-0.2825, 0.0440, -0.0137],
    [-0.1627, 0.3010, -0.1167],
    [-0.3008, 0.2870, -0.0077],
    [-0.1409, 0.2348, 0.0453],
    [-0.2749, 0.1183, -0.3019],
    [-0.3884, 0.0151, -0.2150],
    [-0.3987, 0.1904, -0.1990]
]

mass = [
    [14.00672,  14.00672,  14.00672 ],
    [12.01078,  12.01078,  12.01078 ],
    [12.01078,  12.01078,  12.01078 ],
    [15.99943,  15.99943,  15.99943 ],
    [12.01078,  12.01078,  12.01078 ],
    [12.01078,  12.01078,  12.01078 ],
    [12.01078,  12.01078,  12.01078 ],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [14.00672,  14.00672,  14.00672 ],
    [12.01078,  12.01078,  12.01078 ],
    [12.01078,  12.01078,  12.01078 ],
    [15.99943,  15.99943,  15.99943 ],
    [12.01078,  12.01078,  12.01078 ],
    [12.01078,  12.01078,  12.01078 ],
    [12.01078,  12.01078,  12.01078 ],
    [12.01078,  12.01078,  12.01078 ],
    [12.01078,  12.01078,  12.01078 ],
    [12.01078,  12.01078,  12.01078 ],
    [12.01078,  12.01078,  12.01078 ],
    [15.99943,  15.99943,  15.99943 ],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [14.00672,  14.00672,  14.00672 ],
    [12.01078,  12.01078,  12.01078 ],
    [12.01078,  12.01078,  12.01078 ],
    [15.99943,  15.99943,  15.99943 ],
    [12.01078,  12.01078,  12.01078 ],
    [12.01078,  12.01078,  12.01078 ],
    [12.01078,  12.01078,  12.01078 ],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [14.00672,  14.00672,  14.00672 ],
    [12.01078,  12.01078,  12.01078 ],
    [12.01078,  12.01078,  12.01078 ],
    [15.99943,  15.99943,  15.99943 ],
    [12.01078,  12.01078,  12.01078 ],
    [12.01078,  12.01078,  12.01078 ],
    [12.01078,  12.01078,  12.01078 ],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
    [1.007947,  1.007947,  1.007947],
]

class PYPV(BaseSet):
    def __init__(self, args):
        super().__init__()
        self.device = args.device
        
        molecule = read('data/pypv/pypv.pdb')
        atomic_numbers = molecule.get_atomic_numbers()
        atomic_symbols = [chemical_symbols[z] for z in atomic_numbers]     
        
        self.model = torchani.models.ANI2x().to(self.device)
        self.species = self.model.consts.species_to_tensor(atomic_symbols).unsqueeze(0)
        
        self.mass = torch.tensor(mass, device=self.device).unsqueeze(0)
        target_temperature = 300
        kBT = 1.380649 * 6.02214076 * 1e-3 * target_temperature
        self.beta = 1 / kBT
        
        self.data_ndim = len(atomic_numbers) * 3
        self.initial_position = torch.tensor(initial_position, device=self.device)
        
        # self.samples = torch.tensor(np.load(f"data/pypv/pypv.npy"))
        # self.samples = self.samples[torch.randperm(self.samples.shape[0], generator=torch.Generator().manual_seed(0))]
        
        # if args.method in ['ours', 'mle']:
        #     self.energy_call_count = 60000000 # 60000 length_md * 1000 batch_size for 1 round teacher
        # else:
        self.energy_call_count = 0

    def energy(self, x, count=False):
        x = x.reshape(-1, self.data_ndim//3, 3)
        species = self.species.repeat(x.shape[0], 1)
        energies_h = self.model((species, 10*x)).energies
        energies_kJmol = hartree2kjoulemol(energies_h)
        energies = energies_kJmol * self.beta
        if count:
            self.energy_call_count += x.shape[0]
        return energies
    
    def non_reduced_energy(self, x, count=False):
        x = x.reshape(-1, self.data_ndim//3, 3)
        species = self.species.repeat(x.shape[0], 1)
        energies_h = self.model((species, 10*x)).energies
        energies_kJmol = hartree2kjoulemol(energies_h)
        if count:
            self.energy_call_count += x.shape[0]
        return energies_kJmol

    # def sample(self, batch_size):
    #     return self.samples[torch.randperm(batch_size)]

    # def interatomic_distance(self, x):
    #     return interatomic_distance(x, self.data_ndim//3, 3, remove_duplicates=True)