import numpy as np
import mdtraj as md
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm

from utils import compute_dihedral

def plot_phi_psi(xs, dpi=300):
    """
    Plots a 2D histogram of phi and psi angles.

    Args:
        xs (numpy.ndarray): Input data for dihedral angle computation.
        dpi (int): Dots per inch for the figure.

    Returns:
        matplotlib.figure.Figure: The generated figure.
    """
    fig = plt.figure(figsize=(6, 6), dpi=dpi)
    
    angle_1 = [6, 8, 14, 16]
    angle_2 = [1, 6, 8, 14] 
    
    psi = compute_dihedral(xs[:, angle_1, :])
    phi = compute_dihedral(xs[:, angle_2, :])
    phi = phi.detach().cpu().numpy()
    psi = psi.detach().cpu().numpy()

    xedges = np.linspace(-np.pi, np.pi, 51)
    yedges = np.linspace(-np.pi, np.pi, 51)
    plt.hist2d(phi, psi, bins=[xedges, yedges], norm=LogNorm(), cmap="viridis")
    plt.xlim(-np.pi, np.pi)
    plt.ylim(-np.pi, np.pi)
    plt.xlabel("$\phi$", fontsize=14)
    plt.ylabel("$\psi$", fontsize=14)
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)
    plt.colorbar(label="Density")
    plt.tight_layout()
    return fig

def plot_energy_hist(energy_dict, dpi=300):
    """
    Plots a histogram of energy values.

    Args:
        energy_dict (dict): Dictionary containing energy values for different categories.
        dpi (int): Dots per inch for the figure.

    Returns:
        matplotlib.figure.Figure: The generated figure.
    """
    fig = plt.figure(figsize=(6, 6), dpi=dpi)
    plt.xlabel("Energy [$k_B T$]", fontsize=14)

    energy_dict['Student'] = energy_dict['Student'][~np.isnan(energy_dict['Student'])]
    
    if len(energy_dict['Student']) == 0:
        upper = energy_dict['GT'].max()
        lower = energy_dict['GT'].min()
    else:
        upper = max(energy_dict['GT'].max(), np.percentile(energy_dict['Student'], 90))
        lower = min(energy_dict['GT'].min(), energy_dict['Student'].min())
    
    for name, energy in energy_dict.items():
        plt.hist(energy, range=(lower, upper), bins=40, density=False, label=name, alpha=0.5)

    plt.ylabel("Count", fontsize=14)
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)
    plt.legend(fontsize=12)
    plt.tight_layout()
    return fig


atom_colors = {
    "carbon": "gray",
    "nitrogen": "blue",
    "oxygen": "red",
    "hydrogen": "black",
    "sulfur": "yellow",
    "phosphorus": "orange",
}

atom_size = {
    "carbon": 100,
    "nitrogen": 100,
    "oxygen": 100,
    "hydrogen": 25,
    "sulfur": 100,
    "phosphorus": 100,
}

def draw_mols(name, samples):
    """
    Draw a figure containing 3D molecule.

    Args:
        energy (BaseEnergy): Energy function.
        sample (Array): Sample generated by model.

    Return:
        fig, axs: matplotlib figure and axes objec
    """

    assert samples.shape[0] >= 3

    # Make ten subplots
    fig, axs = plt.subplots(1, 3, figsize=(30, 10), subplot_kw=dict(projection="3d"))

    for i, ax in enumerate(axs.flatten()):
        draw_mol(
            name,
            ax,
            samples[i].reshape(-1, 3).detach().cpu().numpy(),
        )
    return fig

def draw_mol(name, ax, coordinate):
    """
    Visualizes molecular conformation using matplotlib's 3D plot.
    Returns the generated matplotlib Axes object.

    parameters:
        coordinates (Array): Molecular atom coordinates. Should be array of shape (n_atoms, 3).

    return:
        matplotlib.axes.Axes: Axes object containing the visualized molecular plot.
    """
    
    # get topology (md.Topology) from pdb file
    coordinate = np.nan_to_num(coordinate, nan=0.0, posinf=0.0, neginf=0.0)
    
    topology = md.load(f"./data/{name}/{name}.pdb").topology

    center_of_mass = np.mean(coordinate, axis=0)
    coordinate = coordinate - center_of_mass

    # Set the box aspect ratio
    ax.set_aspect("equal")

    # Set the background color to white
    ax.xaxis.pane.fill = False
    ax.yaxis.pane.fill = False
    ax.zaxis.pane.fill = False
    ax.xaxis.pane.set_edgecolor("w")
    ax.yaxis.pane.set_edgecolor("w")
    ax.zaxis.pane.set_edgecolor("w")

    # Draw atoms
    for i, atom in enumerate(topology.atoms):
        atom_name = atom.element.name
        ax.scatter(
            coordinate[i, 0],
            coordinate[i, 1],
            coordinate[i, 2],
            c=atom_colors.get(atom_name, "gray"),
            s=atom_size.get(atom_name, 20),
            label=atom_name,
            alpha=0.8,
            edgecolors="black",
            depthshade=True,
        )

    # Draw bonds
    for bond in topology.bonds:
        atom1, atom2 = bond
        x = [coordinate[atom1.index, 0], coordinate[atom2.index, 0]]
        y = [coordinate[atom1.index, 1], coordinate[atom2.index, 1]]
        z = [coordinate[atom1.index, 2], coordinate[atom2.index, 2]]
        ax.plot(x, y, z, "k-", linewidth=2.0, alpha=0.6)

    # Set the view angle
    ax.view_init(elev=20, azim=45)

    # Set the axis labels
    ax.set_xlabel("X (nm)")
    ax.set_ylabel("Y (nm)")
    ax.set_zlabel("Z (nm)")

    # Adjust the axis limits to fit the molecule
    max_range = (
        np.array(
            [
                coordinate[:, 0].max() - coordinate[:, 0].min(),
                coordinate[:, 1].max() - coordinate[:, 1].min(),
                coordinate[:, 2].max() - coordinate[:, 2].min(),
            ]
        ).max()
        / 2.0
    )
    mid_x = (coordinate[:, 0].max() + coordinate[:, 0].min()) * 0.5
    mid_y = (coordinate[:, 1].max() + coordinate[:, 1].min()) * 0.5
    mid_z = (coordinate[:, 2].max() + coordinate[:, 2].min()) * 0.5

    ax.set_xlim(mid_x - max_range, mid_x + max_range)
    ax.set_ylim(mid_y - max_range, mid_y + max_range)
    ax.set_zlim(mid_z - max_range, mid_z + max_range)

    # Draw the legend
    handles, labels = ax.get_legend_handles_labels()
    unique_labels = dict(zip(labels, handles))
    ax.legend(
        unique_labels.values(),
        unique_labels.keys(),
        loc="center left",
        bbox_to_anchor=(1, 0.5),
    )

    return ax


def draw_interatomic_dist_histogram(ax, interatomic_dist, name=None, bins=100):
    ax.set_xlabel("Interatomic distances", fontsize=14)
    ax.set_ylabel("Density", fontsize=14)
    ax.grid(True, linestyle="--", alpha=0.7)

    return ax.hist(
        interatomic_dist,
        bins=bins,
        range=(0, 6),
        alpha=0.5,
        label=name,
        density=True,
        histtype="step",
        linewidth=4,
    )
    
def make_interatomic_dist_fig(dist_dict):
    fig, ax = plt.subplots(1, 1, figsize=(8, 6))

    for name, interatomic_dist in dist_dict.items():
        draw_interatomic_dist_histogram(ax, interatomic_dist, name)

    ax.legend(fontsize=12)
    plt.tight_layout()
    return fig