GFN(
  (t_model): TimeEncoding(
    (t_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): GELU(approximate='none')
      (2): Linear(in_features=64, out_features=64, bias=True)
      (3): GELU(approximate='none')
    )
  )
  (s_model): StateEncoding(
    (x_model): Sequential(
      (0): Linear(in_features=2, out_features=64, bias=True)
      (1): GELU(approximate='none')
      (2): Linear(in_features=64, out_features=64, bias=True)
      (3): GELU(approximate='none')
    )
  )
  (joint_model): JointPolicy(
    (model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): GELU(approximate='none')
      (2): Linear(in_features=64, out_features=64, bias=True)
      (3): GELU(approximate='none')
      (4): Linear(in_features=64, out_features=4, bias=True)
    )
  )
  (langevin_scaling_model): LangevinScalingModel(
    (model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): GELU(approximate='none')
      (2): Linear(in_features=64, out_features=64, bias=True)
      (3): GELU(approximate='none')
      (4): Linear(in_features=64, out_features=1, bias=True)
    )
  )
)
  0%|                                                                      | 0/25001 [00:01<?, ?it/s]
Traceback (most recent call last):
  File "/home/minkyu/gfn-diffusion/energy_sampling/train.py", line 339, in <module>
    train()
  File "/home/minkyu/gfn-diffusion/energy_sampling/train.py", line 308, in train
    metrics.update(eval_step(eval_data, energy, gfn_model, final_eval=False))
  File "/home/minkyu/gfn-diffusion/energy_sampling/train.py", line 212, in eval_step
    metrics.update(get_sample_metrics(samples, eval_data, final_eval))
  File "/compuworks/anaconda3/envs/gfn_school/lib/python3.10/site-packages/torch/autograd/grad_mode.py", line 27, in decorate_context
    return func(*args, **kwargs)
  File "/home/minkyu/gfn-diffusion/energy_sampling/evaluations.py", line 33, in get_sample_metrics
    return compute_distribution_distances(samples.unsqueeze(1), gt_samples.unsqueeze(1), final_eval)
  File "/home/minkyu/gfn-diffusion/energy_sampling/sample_metrics.py", line 279, in compute_distribution_distances
    w1 = wasserstein(a, b, power=1)
  File "/home/minkyu/gfn-diffusion/energy_sampling/sample_metrics.py", line 39, in wasserstein
    ret = ot_fn(a, b, M.detach().cpu().numpy(), numItermax=1e7)
RuntimeError: Numpy is not available
