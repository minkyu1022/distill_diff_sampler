GFN(
  (t_model): TimeEncodingPIS(
    (t_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): GELU(approximate='none')
      (2): Linear(in_features=64, out_features=64, bias=True)
    )
  )
  (s_model): StateEncodingPIS(
    (x_model): Linear(in_features=32, out_features=64, bias=True)
  )
  (joint_model): JointPolicyPIS(
    (model): Sequential(
      (0): GELU(approximate='none')
      (1): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): GELU(approximate='none')
      )
      (2): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): GELU(approximate='none')
      )
      (3): Linear(in_features=64, out_features=64, bias=True)
    )
  )
  (langevin_scaling_model): LangevinScalingModelPIS(
    (lgv_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): Sequential(
        (0): GELU(approximate='none')
        (1): Linear(in_features=64, out_features=64, bias=True)
      )
      (2): Sequential(
        (0): GELU(approximate='none')
        (1): Linear(in_features=64, out_features=64, bias=True)
      )
      (3): GELU(approximate='none')
      (4): Linear(in_features=64, out_features=1, bias=True)
    )
  )
)
  2%|█▏                                                                    | 173/10001 [04:24<4:10:43,  1.53s/it]
Traceback (most recent call last):
  File "/home/minkyu/gfn-diffusion/energy_sampling/train.py", line 394, in <module>
    train()
  File "/home/minkyu/gfn-diffusion/energy_sampling/train.py", line 345, in train
    metrics['train/loss'] = train_step(energy, gfn_model, gfn_optimizer, i, args.exploratory,
  File "/home/minkyu/gfn-diffusion/energy_sampling/train.py", line 248, in train_step
    loss = fwd_train_step(energy, gfn_model, exploration_std)
  File "/home/minkyu/gfn-diffusion/energy_sampling/train.py", line 257, in fwd_train_step
    loss = get_gfn_forward_loss(args.mode_fwd, init_state, gfn_model, energy.log_reward, coeff_matrix,
  File "/home/minkyu/gfn-diffusion/energy_sampling/utils.py", line 81, in get_gfn_forward_loss
    loss = fwd_tb(init_state, gfn_model, log_reward, exploration_std, return_exp=return_exp)
  File "/home/minkyu/gfn-diffusion/energy_sampling/gflownet_losses.py", line 6, in fwd_tb
    states, log_pfs, log_pbs, log_fs = gfn.get_trajectory_fwd(initial_state, exploration_std, log_reward_fn)
  File "/home/minkyu/gfn-diffusion/energy_sampling/models/gfn.py", line 139, in get_trajectory_fwd
    pfs, flow = self.predict_next_state(s, i * self.dt, log_r)
  File "/home/minkyu/gfn-diffusion/energy_sampling/models/gfn.py", line 104, in predict_next_state
    grad_log_r = torch.autograd.grad(log_r(s).sum(), s)[0].detach()
  File "/home/minkyu/gfn-diffusion/energy_sampling/energies/base_set.py", line 56, in log_reward
    return -self.energy(x)
  File "/home/minkyu/gfn-diffusion/energy_sampling/energies/many_well.py", line 56, in energy
    return -self.manywell_logprob(x)
  File "/home/minkyu/gfn-diffusion/energy_sampling/energies/many_well.py", line 69, in manywell_logprob
    [self.doublewell_logprob(x[:, i*2:i*2+2]) for i in range(self.n_wells)],
  File "/home/minkyu/gfn-diffusion/energy_sampling/energies/many_well.py", line 69, in <listcomp>
    [self.doublewell_logprob(x[:, i*2:i*2+2]) for i in range(self.n_wells)],
  File "/home/minkyu/gfn-diffusion/energy_sampling/energies/many_well.py", line 62, in doublewell_logprob
    x1_term = 0.5*x1 + 6*x1.pow(2) - x1.pow(4)
KeyboardInterrupt
