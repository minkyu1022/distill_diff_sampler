GFN(
  (t_model): TimeEncodingPIS(
    (t_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): GELU(approximate='none')
      (2): Linear(in_features=64, out_features=64, bias=True)
    )
  )
  (s_model): StateEncodingPIS(
    (x_model): Linear(in_features=32, out_features=64, bias=True)
  )
  (joint_model): JointPolicyPIS(
    (model): Sequential(
      (0): GELU(approximate='none')
      (1): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): GELU(approximate='none')
      )
      (2): Sequential(
        (0): Linear(in_features=64, out_features=64, bias=True)
        (1): GELU(approximate='none')
      )
      (3): Linear(in_features=64, out_features=64, bias=True)
    )
  )
  (langevin_scaling_model): LangevinScalingModelPIS(
    (lgv_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): Sequential(
        (0): GELU(approximate='none')
        (1): Linear(in_features=64, out_features=64, bias=True)
      )
      (2): Sequential(
        (0): GELU(approximate='none')
        (1): Linear(in_features=64, out_features=64, bias=True)
      )
      (3): GELU(approximate='none')
      (4): Linear(in_features=64, out_features=1, bias=True)
    )
  )
)
  6%|███▍                                                     | 1500/25001 [07:33<1:58:17,  3.31it/s]
Traceback (most recent call last):
  File "/home/minkyu/gfn-diffusion/energy_sampling/train.py", line 339, in <module>
    train()
  File "/home/minkyu/gfn-diffusion/energy_sampling/train.py", line 311, in train
    images = plot_step(energy, gfn_model, name)
  File "/home/minkyu/gfn-diffusion/energy_sampling/train.py", line 141, in plot_step
    vizualizations = viz_many_well(energy, samples)
  File "/home/minkyu/gfn-diffusion/energy_sampling/plot_utils.py", line 77, in viz_many_well
    fig_kde_x23, ax_kde_x23 = viz_kde2d(x23, "kde", f"kdex23.png", lim=3)
  File "/home/minkyu/gfn-diffusion/energy_sampling/plot_utils.py", line 128, in viz_kde2d
    sns.kdeplot(
  File "/compuworks/anaconda3/envs/gfn_school/lib/python3.10/site-packages/seaborn/distributions.py", line 1715, in kdeplot
    p.plot_bivariate_density(
  File "/compuworks/anaconda3/envs/gfn_school/lib/python3.10/site-packages/seaborn/distributions.py", line 1073, in plot_bivariate_density
    density, support = estimator(*observations, weights=weights)
  File "/compuworks/anaconda3/envs/gfn_school/lib/python3.10/site-packages/seaborn/_statistics.py", line 195, in __call__
    return self._eval_bivariate(x1, x2, weights)
  File "/compuworks/anaconda3/envs/gfn_school/lib/python3.10/site-packages/seaborn/_statistics.py", line 186, in _eval_bivariate
    density = kde([xx1.ravel(), xx2.ravel()]).reshape(xx1.shape)
  File "/compuworks/anaconda3/envs/gfn_school/lib/python3.10/site-packages/scipy/stats/_kde.py", line 271, in evaluate
    result = gaussian_kernel_estimate[spec](
KeyboardInterrupt
