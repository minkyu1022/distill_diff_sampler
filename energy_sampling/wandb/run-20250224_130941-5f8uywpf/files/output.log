GFN(
  (t_model): TimeEncoding(
    (t_model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): GELU(approximate='none')
      (2): Linear(in_features=64, out_features=64, bias=True)
      (3): GELU(approximate='none')
    )
  )
  (s_model): StateEncoding(
    (x_model): Sequential(
      (0): Linear(in_features=2, out_features=64, bias=True)
      (1): GELU(approximate='none')
      (2): Linear(in_features=64, out_features=64, bias=True)
      (3): GELU(approximate='none')
    )
  )
  (joint_model): JointPolicy(
    (model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): GELU(approximate='none')
      (2): Linear(in_features=64, out_features=64, bias=True)
      (3): GELU(approximate='none')
      (4): Linear(in_features=64, out_features=4, bias=True)
    )
  )
  (langevin_scaling_model): LangevinScalingModel(
    (model): Sequential(
      (0): Linear(in_features=128, out_features=64, bias=True)
      (1): GELU(approximate='none')
      (2): Linear(in_features=64, out_features=64, bias=True)
      (3): GELU(approximate='none')
      (4): Linear(in_features=64, out_features=1, bias=True)
    )
  )
)
  0%|â–Ž                                                         | 112/25001 [00:30<1:53:38,  3.65it/s]
Traceback (most recent call last):
  File "/home/minkyu/gfn-diffusion/energy_sampling/train.py", line 339, in <module>
    train()
  File "/home/minkyu/gfn-diffusion/energy_sampling/train.py", line 305, in train
    metrics['train/loss'] = train_step(energy, gfn_model, gfn_optimizer, i, args.exploratory,
  File "/home/minkyu/gfn-diffusion/energy_sampling/train.py", line 235, in train_step
    loss = fwd_train_step(energy, gfn_model, exploration_std)
  File "/home/minkyu/gfn-diffusion/energy_sampling/train.py", line 244, in fwd_train_step
    loss = get_gfn_forward_loss(args.mode_fwd, init_state, gfn_model, energy.log_reward, coeff_matrix,
  File "/home/minkyu/gfn-diffusion/energy_sampling/utils.py", line 81, in get_gfn_forward_loss
    loss = fwd_tb(init_state, gfn_model, log_reward, exploration_std, return_exp=return_exp)
  File "/home/minkyu/gfn-diffusion/energy_sampling/gflownet_losses.py", line 6, in fwd_tb
    states, log_pfs, log_pbs, log_fs = gfn.get_trajectory_fwd(initial_state, exploration_std, log_reward_fn)
  File "/home/minkyu/gfn-diffusion/energy_sampling/models/gfn.py", line 139, in get_trajectory_fwd
    pfs, flow = self.predict_next_state(s, i * self.dt, log_r)
  File "/home/minkyu/gfn-diffusion/energy_sampling/models/gfn.py", line 114, in predict_next_state
    s = self.s_model(s)
  File "/compuworks/anaconda3/envs/gfn_school/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/minkyu/gfn-diffusion/energy_sampling/models/architectures.py", line 126, in forward
    return self.x_model(s)
  File "/compuworks/anaconda3/envs/gfn_school/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/compuworks/anaconda3/envs/gfn_school/lib/python3.10/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/compuworks/anaconda3/envs/gfn_school/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/compuworks/anaconda3/envs/gfn_school/lib/python3.10/site-packages/torch/nn/modules/activation.py", line 684, in forward
    return F.gelu(input, approximate=self.approximate)
KeyboardInterrupt
